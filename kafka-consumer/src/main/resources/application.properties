#应用(服务)名称
spring.application.name=kafka-consumer
spring.profiles.active=dev
#应用端口号
server.port=8099
server.servlet.context-path=/kafka-consumer

# ************************ kafka 相关配置 ******************************/
# 指定kafka server的地址，集群配多个，中间，逗号隔开
spring.kafka.bootstrapServers=192.168.6.178:9092

# consumer
# topic
spring.kafka.consumer.topic=credit-report-test
# 标识此使用者所属的使用者组的唯一字符串。
spring.kafka.consumer.groupId=credit-report-groupid
# 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
spring.kafka.consumer.autoCommitInterval=1S
# 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
# latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
# earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
spring.kafka.consumer.autoOffsetReset=earliest
# 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
spring.kafka.consumer.enableAutoCommit=false
# Maximum number of records returned in a single call to poll().
spring.kafka.consumer.maxPollRecords=5
# 键的反序列化方式
spring.kafka.consumer.keyDeserializer=org.apache.kafka.common.serialization.StringDeserializer
# 值的序列化方式
spring.kafka.consumer.valueDeserializer=org.apache.kafka.common.serialization.StringDeserializer

# listener
# 在侦听器容器中运行的线程数。
spring.kafka.listener.concurrency=5
#listner负责ack，每调用一次，就立即commit
spring.kafka.listener.ack-mode=manual_immediate
# 在侦听器容器中运行的线程数。
spring.kafka.listener.missing-topics-fatal=false




